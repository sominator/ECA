{"remainingRequest":"C:\\Users\\ultfl\\coding\\javascript\\ECA\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ultfl\\coding\\javascript\\ECA\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ultfl\\coding\\javascript\\ECA\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ultfl\\coding\\javascript\\ECA\\client\\src\\components\\CharGen.vue?vue&type=template&id=36c2511a&scoped=true&","dependencies":[{"path":"C:\\Users\\ultfl\\coding\\javascript\\ECA\\client\\src\\components\\CharGen.vue","mtime":1596486666749},{"path":"C:\\Users\\ultfl\\coding\\javascript\\ECA\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ultfl\\coding\\javascript\\ECA\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\ultfl\\coding\\javascript\\ECA\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ultfl\\coding\\javascript\\ECA\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}