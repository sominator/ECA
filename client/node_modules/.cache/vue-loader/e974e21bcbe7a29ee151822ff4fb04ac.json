{"remainingRequest":"C:\\Users\\Som\\coding\\javascript\\ECA\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Som\\coding\\javascript\\ECA\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Som\\coding\\javascript\\ECA\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Som\\coding\\javascript\\ECA\\client\\src\\components\\Struct.vue?vue&type=template&id=120f80f6&scoped=true&","dependencies":[{"path":"C:\\Users\\Som\\coding\\javascript\\ECA\\client\\src\\components\\Struct.vue","mtime":1679079261703},{"path":"C:\\Users\\Som\\coding\\javascript\\ECA\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1597202077995},{"path":"C:\\Users\\Som\\coding\\javascript\\ECA\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1597202089624},{"path":"C:\\Users\\Som\\coding\\javascript\\ECA\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1597202077995},{"path":"C:\\Users\\Som\\coding\\javascript\\ECA\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1597202089618}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}