{"remainingRequest":"C:\\Users\\ultfl\\coding\\ECA\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ultfl\\coding\\ECA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ultfl\\coding\\ECA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ultfl\\coding\\ECA\\src\\components\\CharGen.vue?vue&type=template&id=36c2511a&scoped=true&","dependencies":[{"path":"C:\\Users\\ultfl\\coding\\ECA\\src\\components\\CharGen.vue","mtime":1582074960294},{"path":"C:\\Users\\ultfl\\coding\\ECA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ultfl\\coding\\ECA\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\ultfl\\coding\\ECA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ultfl\\coding\\ECA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\"div\", { attrs: { id: \"buttons\" } }, [\n      _c(\n        \"button\",\n        {\n          on: {\n            click: function($event) {\n              _vm.toggle = \"races\"\n            }\n          }\n        },\n        [_vm._v(\"Choose Race\")]\n      ),\n      _c(\n        \"button\",\n        {\n          on: {\n            click: function($event) {\n              _vm.toggle = \"classes\"\n            }\n          }\n        },\n        [_vm._v(\"Choose Class\")]\n      ),\n      _c(\n        \"button\",\n        {\n          on: {\n            click: function($event) {\n              _vm.toggle = \"archetypes\"\n            }\n          }\n        },\n        [_vm._v(\"Choose Archetype\")]\n      ),\n      _c(\n        \"button\",\n        {\n          on: {\n            click: function($event) {\n              _vm.toggle = \"feats\"\n            }\n          }\n        },\n        [_vm._v(\"Choose Feats\")]\n      ),\n      _c(\n        \"button\",\n        {\n          on: {\n            click: function($event) {\n              _vm.toggle = \"talents\"\n            }\n          }\n        },\n        [_vm._v(\"Choose Talents/Spells\")]\n      )\n    ]),\n    _c(\"div\", { attrs: { id: \"char-gen\" } }, [\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.toggle === \"races\",\n              expression: \"toggle === 'races'\"\n            }\n          ],\n          attrs: { id: \"races\" }\n        },\n        _vm._l(_vm.raceData, function(race) {\n          return _c(\"Race\", {\n            key: race.name,\n            attrs: { raceData: race, raceChoice: _vm.characterData.raceChoice },\n            on: { raceChosen: _vm.updateRace }\n          })\n        })\n      ),\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.toggle === \"classes\",\n              expression: \"toggle === 'classes'\"\n            }\n          ],\n          attrs: { id: \"classes\" }\n        },\n        _vm._l(_vm.classData, function(charClass) {\n          return _c(\"Class\", {\n            key: charClass.name,\n            attrs: {\n              classData: charClass,\n              classChoice: _vm.characterData.classChoice\n            },\n            on: { classChosen: _vm.updateClass }\n          })\n        })\n      ),\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.toggle === \"archetypes\",\n              expression: \"toggle === 'archetypes'\"\n            }\n          ],\n          attrs: { id: \"archetypes\" }\n        },\n        [\n          _c(\n            \"h3\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"\",\n                  expression: \"characterData.classChoice === ''\"\n                }\n              ]\n            },\n            [_vm._v(\"Choose a class to determine your archetype.\")]\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"NIGHT Agent\",\n                  expression: \"characterData.classChoice === 'NIGHT Agent'\"\n                }\n              ],\n              staticClass: \"archetypes-sub\"\n            },\n            _vm._l(_vm.classData.nightAgent.archetypes, function(archetype) {\n              return _c(\"Archetype\", {\n                key: archetype.name,\n                attrs: {\n                  archetypeData: archetype,\n                  archetypeChoice: _vm.characterData.archetypeChoice\n                },\n                on: { archetypeChosen: _vm.updateArchetype }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"Revolutionary\",\n                  expression: \"characterData.classChoice === 'Revolutionary'\"\n                }\n              ],\n              staticClass: \"archetypes-sub\"\n            },\n            _vm._l(_vm.classData.revolutionary.archetypes, function(archetype) {\n              return _c(\"Archetype\", {\n                key: archetype.name,\n                attrs: {\n                  archetypeData: archetype,\n                  archetypeChoice: _vm.characterData.archetypeChoice\n                },\n                on: { archetypeChosen: _vm.updateArchetype }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"Technomancer\",\n                  expression: \"characterData.classChoice === 'Technomancer'\"\n                }\n              ],\n              staticClass: \"archetypes-sub\"\n            },\n            _vm._l(_vm.classData.technomancer.archetypes, function(archetype) {\n              return _c(\"Archetype\", {\n                key: archetype.name,\n                attrs: {\n                  archetypeData: archetype,\n                  archetypeChoice: _vm.characterData.archetypeChoice\n                },\n                on: { archetypeChosen: _vm.updateArchetype }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"Terramancer\",\n                  expression: \"characterData.classChoice === 'Terramancer'\"\n                }\n              ],\n              staticClass: \"archetypes-sub\"\n            },\n            _vm._l(_vm.classData.terramancer.archetypes, function(archetype) {\n              return _c(\"Archetype\", {\n                key: archetype.name,\n                attrs: {\n                  archetypeData: archetype,\n                  archetypeChoice: _vm.characterData.archetypeChoice\n                },\n                on: { archetypeChosen: _vm.updateArchetype }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"Vanguard\",\n                  expression: \"characterData.classChoice === 'Vanguard'\"\n                }\n              ],\n              staticClass: \"archetypes-sub\"\n            },\n            _vm._l(_vm.classData.vanguard.archetypes, function(archetype) {\n              return _c(\"Archetype\", {\n                key: archetype.name,\n                attrs: {\n                  archetypeData: archetype,\n                  archetypeChoice: _vm.characterData.archetypeChoice\n                },\n                on: { archetypeChosen: _vm.updateArchetype }\n              })\n            })\n          )\n        ]\n      ),\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.toggle === \"feats\",\n              expression: \"toggle === 'feats'\"\n            }\n          ],\n          attrs: { id: \"feats\" }\n        },\n        [\n          _c(\n            \"h3\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"\",\n                  expression: \"characterData.classChoice === ''\"\n                }\n              ],\n              staticStyle: { \"margin-left\": \"-120px\" }\n            },\n            [_vm._v(\"Choose a class to determine your feats.\")]\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"NIGHT Agent\",\n                  expression: \"characterData.classChoice === 'NIGHT Agent'\"\n                }\n              ],\n              staticClass: \"feats-sub\"\n            },\n            _vm._l(_vm.classData.nightAgent.feats, function(feat) {\n              return _c(\"Feat\", {\n                key: feat.name,\n                attrs: {\n                  featData: feat,\n                  featChoice: _vm.characterData.featChoice\n                },\n                on: { featAdded: _vm.addFeat, featRemoved: _vm.removeFeat }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"Revolutionary\",\n                  expression: \"characterData.classChoice === 'Revolutionary'\"\n                }\n              ],\n              staticClass: \"feats-sub\"\n            },\n            _vm._l(_vm.classData.revolutionary.feats, function(feat) {\n              return _c(\"Feat\", {\n                key: feat.name,\n                attrs: {\n                  featData: feat,\n                  featChoice: _vm.characterData.featChoice\n                },\n                on: { featAdded: _vm.addFeat, featRemoved: _vm.removeFeat }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"Technomancer\",\n                  expression: \"characterData.classChoice === 'Technomancer'\"\n                }\n              ],\n              staticClass: \"feats-sub\"\n            },\n            _vm._l(_vm.classData.technomancer.feats, function(feat) {\n              return _c(\"Feat\", {\n                key: feat.name,\n                attrs: {\n                  featData: feat,\n                  featChoice: _vm.characterData.featChoice\n                },\n                on: { featAdded: _vm.addFeat, featRemoved: _vm.removeFeat }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"Terramancer\",\n                  expression: \"characterData.classChoice === 'Terramancer'\"\n                }\n              ],\n              staticClass: \"feats-sub\"\n            },\n            _vm._l(_vm.classData.terramancer.feats, function(feat) {\n              return _c(\"Feat\", {\n                key: feat.name,\n                attrs: {\n                  featData: feat,\n                  featChoice: _vm.characterData.featChoice\n                },\n                on: { featAdded: _vm.addFeat, featRemoved: _vm.removeFeat }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.classChoice === \"Vanguard\",\n                  expression: \"characterData.classChoice === 'Vanguard'\"\n                }\n              ],\n              staticClass: \"feats-sub\"\n            },\n            _vm._l(_vm.classData.vanguard.feats, function(feat) {\n              return _c(\"Feat\", {\n                key: feat.name,\n                attrs: {\n                  featData: feat,\n                  featChoice: _vm.characterData.featChoice\n                },\n                on: { featAdded: _vm.addFeat, featRemoved: _vm.removeFeat }\n              })\n            })\n          )\n        ]\n      ),\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.toggle === \"talents\",\n              expression: \"toggle === 'talents'\"\n            }\n          ],\n          attrs: { id: \"talents\" }\n        },\n        [\n          _c(\n            \"h3\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value:\n                    _vm.characterData.archetypeChoice === \"\" ||\n                    _vm.characterData.archetypeChoice === \" \",\n                  expression:\n                    \"characterData.archetypeChoice === '' || characterData.archetypeChoice === ' '\"\n                }\n              ],\n              staticStyle: { \"margin-left\": \"-120px\" }\n            },\n            [_vm._v(\"Choose an archetype to determine your talents/spells.\")]\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.archetypeChoice === \"Nightpath\",\n                  expression: \"characterData.archetypeChoice === 'Nightpath'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(\n              _vm.classData.nightAgent.archetypes.nightpath.spells,\n              function(spell) {\n                return _c(\"Spell\", {\n                  key: spell.name,\n                  attrs: {\n                    spellData: spell,\n                    talentChoice: _vm.characterData.talentChoice\n                  },\n                  on: {\n                    talentAdded: _vm.addTalent,\n                    talentRemoved: _vm.removeTalent\n                  }\n                })\n              }\n            )\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.archetypeChoice === \"Daypath\",\n                  expression: \"characterData.archetypeChoice === 'Daypath'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(_vm.classData.nightAgent.archetypes.daypath.spells, function(\n              spell\n            ) {\n              return _c(\"Spell\", {\n                key: spell.name,\n                attrs: {\n                  spellData: spell,\n                  talentChoice: _vm.characterData.talentChoice\n                },\n                on: {\n                  talentAdded: _vm.addTalent,\n                  talentRemoved: _vm.removeTalent\n                }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.archetypeChoice === \"Gunslinger\",\n                  expression: \"characterData.archetypeChoice === 'Gunslinger'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(\n              _vm.classData.revolutionary.archetypes.gunslinger.talents,\n              function(talent) {\n                return _c(\"Talent\", {\n                  key: talent.name,\n                  attrs: {\n                    talentData: talent,\n                    talentChoice: _vm.characterData.talentChoice\n                  },\n                  on: {\n                    talentAdded: _vm.addTalent,\n                    talentRemoved: _vm.removeTalent\n                  }\n                })\n              }\n            )\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.archetypeChoice === \"Sharpshooter\",\n                  expression: \"characterData.archetypeChoice === 'Sharpshooter'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(\n              _vm.classData.revolutionary.archetypes.sharpshooter.talents,\n              function(talent) {\n                return _c(\"Talent\", {\n                  key: talent.name,\n                  attrs: {\n                    talentData: talent,\n                    talentChoice: _vm.characterData.talentChoice\n                  },\n                  on: {\n                    talentAdded: _vm.addTalent,\n                    talentRemoved: _vm.removeTalent\n                  }\n                })\n              }\n            )\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value:\n                    _vm.characterData.archetypeChoice === \"Combat Engineer\",\n                  expression:\n                    \"characterData.archetypeChoice === 'Combat Engineer'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(\n              _vm.classData.technomancer.archetypes.combatEngineer.spells,\n              function(spell) {\n                return _c(\"Spell\", {\n                  key: spell.name,\n                  attrs: {\n                    spellData: spell,\n                    talentChoice: _vm.characterData.talentChoice\n                  },\n                  on: {\n                    talentAdded: _vm.addTalent,\n                    talentRemoved: _vm.removeTalent\n                  }\n                })\n              }\n            )\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.archetypeChoice === \"Net Specialist\",\n                  expression:\n                    \"characterData.archetypeChoice === 'Net Specialist'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(\n              _vm.classData.technomancer.archetypes.netSpecialist.spells,\n              function(spell) {\n                return _c(\"Spell\", {\n                  key: spell.name,\n                  attrs: {\n                    spellData: spell,\n                    talentChoice: _vm.characterData.talentChoice\n                  },\n                  on: {\n                    talentAdded: _vm.addTalent,\n                    talentRemoved: _vm.removeTalent\n                  }\n                })\n              }\n            )\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.archetypeChoice === \"Arcane Pitcher\",\n                  expression:\n                    \"characterData.archetypeChoice === 'Arcane Pitcher'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(\n              _vm.classData.terramancer.archetypes.arcanePitcher.spells,\n              function(spell) {\n                return _c(\"Spell\", {\n                  key: spell.name,\n                  attrs: {\n                    spellData: spell,\n                    talentChoice: _vm.characterData.talentChoice\n                  },\n                  on: {\n                    talentAdded: _vm.addTalent,\n                    talentRemoved: _vm.removeTalent\n                  }\n                })\n              }\n            )\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value:\n                    _vm.characterData.archetypeChoice === \"Nature's Harbinger\",\n                  expression:\n                    \"characterData.archetypeChoice === 'Nature\\\\'s Harbinger'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(\n              _vm.classData.terramancer.archetypes.naturesHarbinger.spells,\n              function(spell) {\n                return _c(\"Spell\", {\n                  key: spell.name,\n                  attrs: {\n                    spellData: spell,\n                    talentChoice: _vm.characterData.talentChoice\n                  },\n                  on: {\n                    talentAdded: _vm.addTalent,\n                    talentRemoved: _vm.removeTalent\n                  }\n                })\n              }\n            )\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.archetypeChoice === \"Assassin\",\n                  expression: \"characterData.archetypeChoice === 'Assassin'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(_vm.classData.vanguard.archetypes.assassin.talents, function(\n              talent\n            ) {\n              return _c(\"Talent\", {\n                key: talent.name,\n                attrs: {\n                  talentData: talent,\n                  talentChoice: _vm.characterData.talentChoice\n                },\n                on: {\n                  talentAdded: _vm.addTalent,\n                  talentRemoved: _vm.removeTalent\n                }\n              })\n            })\n          ),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.characterData.archetypeChoice === \"Shadowstalker\",\n                  expression:\n                    \"characterData.archetypeChoice === 'Shadowstalker'\"\n                }\n              ],\n              staticClass: \"talents-sub\"\n            },\n            _vm._l(\n              _vm.classData.vanguard.archetypes.shadowstalker.talents,\n              function(talent) {\n                return _c(\"Talent\", {\n                  key: talent.name,\n                  attrs: {\n                    talentData: talent,\n                    talentChoice: _vm.characterData.talentChoice\n                  },\n                  on: {\n                    talentAdded: _vm.addTalent,\n                    talentRemoved: _vm.removeTalent\n                  }\n                })\n              }\n            )\n          )\n        ]\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}